{
  "version": 3,
  "sources": ["../cookie/index.js", "dep:cookie"],
  "sourcesContent": ["/*!\n * cookie\n * Copyright(c) 2012-2014 Roman Shtylman\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module exports.\n * @public\n */\n\nexports.parse = parse;\nexports.serialize = serialize;\n\n/**\n * Module variables.\n * @private\n */\n\nvar decode = decodeURIComponent;\nvar encode = encodeURIComponent;\nvar pairSplitRegExp = /; */;\n\n/**\n * RegExp to match field-content in RFC 7230 sec 3.2\n *\n * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]\n * field-vchar   = VCHAR / obs-text\n * obs-text      = %x80-FF\n */\n\nvar fieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\n\n/**\n * Parse a cookie header.\n *\n * Parse the given cookie header string into an object\n * The object has the various cookies as keys(names) => values\n *\n * @param {string} str\n * @param {object} [options]\n * @return {object}\n * @public\n */\n\nfunction parse(str, options) {\n  if (typeof str !== 'string') {\n    throw new TypeError('argument str must be a string');\n  }\n\n  var obj = {}\n  var opt = options || {};\n  var pairs = str.split(pairSplitRegExp);\n  var dec = opt.decode || decode;\n\n  for (var i = 0; i < pairs.length; i++) {\n    var pair = pairs[i];\n    var eq_idx = pair.indexOf('=');\n\n    // skip things that don't look like key=value\n    if (eq_idx < 0) {\n      continue;\n    }\n\n    var key = pair.substr(0, eq_idx).trim()\n    var val = pair.substr(++eq_idx, pair.length).trim();\n\n    // quoted values\n    if ('\"' == val[0]) {\n      val = val.slice(1, -1);\n    }\n\n    // only assign once\n    if (undefined == obj[key]) {\n      obj[key] = tryDecode(val, dec);\n    }\n  }\n\n  return obj;\n}\n\n/**\n * Serialize data into a cookie header.\n *\n * Serialize the a name value pair into a cookie string suitable for\n * http headers. An optional options object specified cookie parameters.\n *\n * serialize('foo', 'bar', { httpOnly: true })\n *   => \"foo=bar; httpOnly\"\n *\n * @param {string} name\n * @param {string} val\n * @param {object} [options]\n * @return {string}\n * @public\n */\n\nfunction serialize(name, val, options) {\n  var opt = options || {};\n  var enc = opt.encode || encode;\n\n  if (typeof enc !== 'function') {\n    throw new TypeError('option encode is invalid');\n  }\n\n  if (!fieldContentRegExp.test(name)) {\n    throw new TypeError('argument name is invalid');\n  }\n\n  var value = enc(val);\n\n  if (value && !fieldContentRegExp.test(value)) {\n    throw new TypeError('argument val is invalid');\n  }\n\n  var str = name + '=' + value;\n\n  if (null != opt.maxAge) {\n    var maxAge = opt.maxAge - 0;\n\n    if (isNaN(maxAge) || !isFinite(maxAge)) {\n      throw new TypeError('option maxAge is invalid')\n    }\n\n    str += '; Max-Age=' + Math.floor(maxAge);\n  }\n\n  if (opt.domain) {\n    if (!fieldContentRegExp.test(opt.domain)) {\n      throw new TypeError('option domain is invalid');\n    }\n\n    str += '; Domain=' + opt.domain;\n  }\n\n  if (opt.path) {\n    if (!fieldContentRegExp.test(opt.path)) {\n      throw new TypeError('option path is invalid');\n    }\n\n    str += '; Path=' + opt.path;\n  }\n\n  if (opt.expires) {\n    if (typeof opt.expires.toUTCString !== 'function') {\n      throw new TypeError('option expires is invalid');\n    }\n\n    str += '; Expires=' + opt.expires.toUTCString();\n  }\n\n  if (opt.httpOnly) {\n    str += '; HttpOnly';\n  }\n\n  if (opt.secure) {\n    str += '; Secure';\n  }\n\n  if (opt.sameSite) {\n    var sameSite = typeof opt.sameSite === 'string'\n      ? opt.sameSite.toLowerCase() : opt.sameSite;\n\n    switch (sameSite) {\n      case true:\n        str += '; SameSite=Strict';\n        break;\n      case 'lax':\n        str += '; SameSite=Lax';\n        break;\n      case 'strict':\n        str += '; SameSite=Strict';\n        break;\n      case 'none':\n        str += '; SameSite=None';\n        break;\n      default:\n        throw new TypeError('option sameSite is invalid');\n    }\n  }\n\n  return str;\n}\n\n/**\n * Try decoding a string using a decoding function.\n *\n * @param {string} str\n * @param {function} decode\n * @private\n */\n\nfunction tryDecode(str, decode) {\n  try {\n    return decode(str);\n  } catch (e) {\n    return str;\n  }\n}\n", "export default require(\"./node_modules/cookie/index.js\");"],
  "mappings": ";;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAOA,UAAQ,QAAQ;AAChB,UAAQ,YAAY;AAOpB,MAAI,SAAS;AACb,MAAI,SAAS;AACb,MAAI,kBAAkB;AAUtB,MAAI,qBAAqB;AAczB,iBAAe,KAAK,SAAS;AAC3B,QAAI,OAAO,QAAQ,UAAU;AAC3B,YAAM,IAAI,UAAU;AAAA;AAGtB,QAAI,MAAM;AACV,QAAI,MAAM,WAAW;AACrB,QAAI,QAAQ,IAAI,MAAM;AACtB,QAAI,MAAM,IAAI,UAAU;AAExB,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,UAAI,OAAO,MAAM;AACjB,UAAI,SAAS,KAAK,QAAQ;AAG1B,UAAI,SAAS,GAAG;AACd;AAAA;AAGF,UAAI,MAAM,KAAK,OAAO,GAAG,QAAQ;AACjC,UAAI,MAAM,KAAK,OAAO,EAAE,QAAQ,KAAK,QAAQ;AAG7C,UAAI,AAAO,IAAI,MAAX,KAAe;AACjB,cAAM,IAAI,MAAM,GAAG;AAAA;AAIrB,UAAI,AAAa,IAAI,QAAjB,QAAuB;AACzB,YAAI,OAAO,UAAU,KAAK;AAAA;AAAA;AAI9B,WAAO;AAAA;AAmBT,qBAAmB,MAAM,KAAK,SAAS;AACrC,QAAI,MAAM,WAAW;AACrB,QAAI,MAAM,IAAI,UAAU;AAExB,QAAI,OAAO,QAAQ,YAAY;AAC7B,YAAM,IAAI,UAAU;AAAA;AAGtB,QAAI,CAAC,mBAAmB,KAAK,OAAO;AAClC,YAAM,IAAI,UAAU;AAAA;AAGtB,QAAI,QAAQ,IAAI;AAEhB,QAAI,SAAS,CAAC,mBAAmB,KAAK,QAAQ;AAC5C,YAAM,IAAI,UAAU;AAAA;AAGtB,QAAI,MAAM,OAAO,MAAM;AAEvB,QAAI,AAAQ,IAAI,UAAZ,MAAoB;AACtB,UAAI,SAAS,IAAI,SAAS;AAE1B,UAAI,MAAM,WAAW,CAAC,SAAS,SAAS;AACtC,cAAM,IAAI,UAAU;AAAA;AAGtB,aAAO,eAAe,KAAK,MAAM;AAAA;AAGnC,QAAI,IAAI,QAAQ;AACd,UAAI,CAAC,mBAAmB,KAAK,IAAI,SAAS;AACxC,cAAM,IAAI,UAAU;AAAA;AAGtB,aAAO,cAAc,IAAI;AAAA;AAG3B,QAAI,IAAI,MAAM;AACZ,UAAI,CAAC,mBAAmB,KAAK,IAAI,OAAO;AACtC,cAAM,IAAI,UAAU;AAAA;AAGtB,aAAO,YAAY,IAAI;AAAA;AAGzB,QAAI,IAAI,SAAS;AACf,UAAI,OAAO,IAAI,QAAQ,gBAAgB,YAAY;AACjD,cAAM,IAAI,UAAU;AAAA;AAGtB,aAAO,eAAe,IAAI,QAAQ;AAAA;AAGpC,QAAI,IAAI,UAAU;AAChB,aAAO;AAAA;AAGT,QAAI,IAAI,QAAQ;AACd,aAAO;AAAA;AAGT,QAAI,IAAI,UAAU;AAChB,UAAI,WAAW,OAAO,IAAI,aAAa,WACnC,IAAI,SAAS,gBAAgB,IAAI;AAErC,cAAQ;AAAA,aACD;AACH,iBAAO;AACP;AAAA,aACG;AACH,iBAAO;AACP;AAAA,aACG;AACH,iBAAO;AACP;AAAA,aACG;AACH,iBAAO;AACP;AAAA;AAEA,gBAAM,IAAI,UAAU;AAAA;AAAA;AAI1B,WAAO;AAAA;AAWT,qBAAmB,KAAK,SAAQ;AAC9B,QAAI;AACF,aAAO,QAAO;AAAA,aACP,GAAP;AACA,aAAO;AAAA;AAAA;AAAA;;;ACvMX,IAAO,iBAAQ;",
  "names": []
}
